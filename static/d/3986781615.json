{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"friendlyName":"Branch and Bound on Cost","solverKey":"branchAndBoundOnCost","type":"algorithm","class":"exhaustive","defaults":{"evaluatingDetailLevel":2,"maxEvaluatingDetailLevel":2}},"html":"<h1>Branch and Bound on Cost</h1>\n<p>This is a recursive algorithm, similar to depth first search, that is guarunteed to find the optimal solution.</p>\n<p>The candidate solution space is generated by systematically traversing possible paths, and discarding large subsets of fruitless candidates by comparing the current solution to an upper and lower bound. In this case, the upper bound is the best path found so far.</p>\n<p>While evaluating paths, if at any point the current solution is already more expensive (longer) than the best complete path discovered, there is no point continuing.</p>\n<p>For example, imagine:</p>\n<ol>\n<li>A -> B -> C -> D -> E -> A was already found with a cost of 100.</li>\n<li>We are evaluating A -> C -> E, which has a cost of 110. There is <strong>no point</strong> evaluating the remaining solutions.</li>\n<li>\n<p>Instead of continuing to evaluate all of the child solutions from here, we can go down a different path, eliminating candidates not worth evaluating:</p>\n<ul>\n<li><code class=\"language-text\">A -&gt; C -&gt; E -&gt; D -&gt; B -&gt; A</code></li>\n<li><code class=\"language-text\">A -&gt; C -&gt; E -&gt; B -&gt; D -&gt; A</code></li>\n</ul>\n</li>\n</ol>\n<p>Implementation is very similar to depth first search, with the exception that we cut paths that are already longer than the current best.</p>\n<h2>The code</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">branchAndBoundOnCost</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">points<span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> visited<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> overallBest<span class=\"token operator\">=</span><span class=\"token number\">Infinity</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// initial call</span>\n    path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>points<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    points <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// figure out which points are left</span>\n  <span class=\"token keyword\">const</span> available <span class=\"token operator\">=</span> <span class=\"token function\">setDifference</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// calculate the cost, from here, to go home</span>\n  <span class=\"token keyword\">const</span> backToStart <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>path<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> cost <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span>backToStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cost <span class=\"token operator\">></span> overallBest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// we may not be done, but have already traveled further than the best path</span>\n    <span class=\"token comment\">// no reason to continue</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// still cheaper than the best, keep going deeper, and deeper, and deeper...</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>available<span class=\"token punctuation\">.</span>size <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// at the end of the path, return where we're at</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>cost<span class=\"token punctuation\">,</span> backToStart<span class=\"token punctuation\">]</span> \n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestPath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// for every point yet to be visited along this path</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> p <span class=\"token keyword\">of</span> available<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// go to that point</span>\n    visited<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// RECURSE - go through all the possible points from that point</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>curCost<span class=\"token punctuation\">,</span> curPath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">branchAndBoundOnCost</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> overallBest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// if that path is better and complete, keep it</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curCost <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bestCost <span class=\"token operator\">||</span> curCost <span class=\"token operator\">&lt;</span> bestCost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestPath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>curCost<span class=\"token punctuation\">,</span> curPath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>overallBest <span class=\"token operator\">||</span> bestCost <span class=\"token operator\">&lt;</span> overallBest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// found a new best complete path</span>\n        overallBest <span class=\"token operator\">=</span> bestCost\n        self<span class=\"token punctuation\">.</span><span class=\"token function\">setBestPath</span><span class=\"token punctuation\">(</span>bestPath<span class=\"token punctuation\">,</span> bestCost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// go back up and make that point available again</span>\n    visited<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestPath<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},{"node":{"frontmatter":{"friendlyName":"Random","solverKey":"random","type":"algorithm","class":"exhaustive","defaults":{"evaluatingDetailLevel":1,"maxEvaluatingDetailLevel":1}},"html":"<h1>Random</h1>\n<p>This is an impractical, albeit exhaustive algorithm. It is here only for demonstration purposes, but will not find a reasonable path for traveling salesman problems above 7 or 8 points.</p>\n<p>I consider it exhaustive because if it runs for infinity, eventually it will encounter every possible path. </p>\n<ol>\n<li>From the starting path</li>\n<li>Randomly shuffle the path</li>\n<li>If it's better, keep it</li>\n<li>If not, ditch it and keep going</li>\n</ol>\n<h2>The code</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">random</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">points</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> best <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// save off the starting point</span>\n    <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> points<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// sort the remaining points</span>\n    <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> points<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// put the starting point back</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// return to the starting point</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// calculate the new cost</span>\n    <span class=\"token keyword\">const</span> cost <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cost <span class=\"token operator\">&lt;</span> best<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// we found a better path</span>\n      best <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// get rid of starting point at the end</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},{"node":{"frontmatter":{"friendlyName":"Depth First Search (Brute Force)","solverKey":"depthFirstSearch","type":"algorithm","class":"exhaustive","defaults":{"evaluatingDetailLevel":2,"maxEvaluatingDetailLevel":2}},"html":"<h1>Depth First Search (Brute Force)</h1>\n<p>This is an exhaustive, brute-force algorithm. It is guarunteed to find the best possible path, however depending on the number of points in the traveling salesman problem it is likely impractical. For example, </p>\n<ul>\n<li>With 10 points there are 181,400 paths to evaluate. </li>\n<li>With 11 points, there are 1,814,000.</li>\n<li>With 12 points there are 19,960,000.</li>\n<li>With 20 points there are 60,820,000,000,000,000, give or take.</li>\n<li>With 25 points there are 310,200,000,000,000,000,000,000, give or take.</li>\n</ul>\n<p>This is factorial growth, and it quickly makes the TSP impractical to brute force. That is why heuristics exist to give a good approximation of the best path, but it is very difficult to determine without a doubt what the best path is for a reasonably sized traveling salesman problem.</p>\n<p>This is a recursive, depth-first-search algorithm, as follows:</p>\n<ol>\n<li>From the starting point</li>\n<li>For all other points not visited</li>\n<li>If there are no points left return the current cost/path</li>\n<li>Else, go to every remaining point and</li>\n</ol>\n<p>:</p>\n<ol>\n<li>Mark that point as visited</li>\n<li>\"<strong>recurse</strong>\" through those paths (go back to 1. )</li>\n</ol>\n<h2>The code</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dfs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">points<span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> visited<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> overallBest<span class=\"token operator\">=</span><span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// initial call</span>\n    path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>points<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    points <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// figure out what points are left from this point</span>\n  <span class=\"token keyword\">const</span> available <span class=\"token operator\">=</span> <span class=\"token function\">setDifference</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>available<span class=\"token punctuation\">.</span>size <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this must be a complete path</span>\n    <span class=\"token keyword\">const</span> backToStart <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>path<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// calculate the cost of this path</span>\n    <span class=\"token keyword\">const</span> cost <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span>backToStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// return both the cost and the path where we're at</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>cost<span class=\"token punctuation\">,</span> backToStart<span class=\"token punctuation\">]</span> \n  <span class=\"token punctuation\">}</span>\n\n\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestPath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// for every point yet to be visited along this path</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> p <span class=\"token keyword\">of</span> available<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// go to that point</span>\n    visited<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// RECURSE - go through all the possible points from that point</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>curCost<span class=\"token punctuation\">,</span> curPath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> overallBest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// if that path is better, keep it</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bestCost <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> curCost <span class=\"token operator\">&lt;</span> bestCost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestPath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>curCost<span class=\"token punctuation\">,</span> curPath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>overallBest <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> bestCost <span class=\"token operator\">&lt;</span> overallBest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// found a new best complete path</span>\n        overallBest <span class=\"token operator\">=</span> bestCost\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// go back up and make that point available again</span>\n    visited<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>bestCost<span class=\"token punctuation\">,</span> bestPath<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},{"node":{"frontmatter":{"friendlyName":"Two Opt Inversion","solverKey":"twoOptInversion","type":"algorithm","class":"heuristic","defaults":{"evaluatingDetailLevel":1,"maxEvaluatingDetailLevel":1}},"html":"<h1>Two-Opt inversion</h1>\n<p>This is a heuristic, genetic algorithm. It continuously evolves to a better path until it can't find a better evolution.</p>\n<p>It is also known as 2-opt, 2-opt mutation, and cross-aversion. The general goal is to find places where the path crosses over itself, and then \"undo\" that crossing. It repeats until there is no crossings. A characteristic of this algorithm is that afterwards the path is guarunteed to have no crossings.</p>\n<ol>\n<li>While a better path has not been found.</li>\n<li>For each pair of points:</li>\n<li>Reverse the path between the selected points.</li>\n<li>If the new path is cheaper (shorter), keep it and continue searching. Remember that we found a better path.</li>\n<li>If not, revert the path and continue searching.</li>\n</ol>\n<h2>The code</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoOptInversion</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">path</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> best <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>swapped<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> pt1<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pt1<span class=\"token operator\">&lt;</span>path<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pt1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> pt2<span class=\"token operator\">=</span>pt1<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pt2<span class=\"token operator\">&lt;</span>path<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pt2<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// section of the path to reverse</span>\n        <span class=\"token keyword\">const</span> section <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>pt1<span class=\"token punctuation\">,</span> pt2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// reverse section in place</span>\n        section<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// replace section of path with reversed section in place</span>\n        path<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>pt1<span class=\"token punctuation\">,</span> pt2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>pt1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>section<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// calculate new cost</span>\n        <span class=\"token keyword\">const</span> newPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> cost <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span>ne\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cost <span class=\"token operator\">&lt;</span> best<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// found a better path after the swap, keep it</span>\n          swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          best <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">;</span>\n          self<span class=\"token punctuation\">.</span><span class=\"token function\">setBestPath</span><span class=\"token punctuation\">(</span>newPath<span class=\"token punctuation\">,</span> best<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// un-reverse the section</span>\n          section<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          path<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>pt1<span class=\"token punctuation\">,</span> pt2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>pt1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>section<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},{"node":{"frontmatter":{"friendlyName":"Shortest Path","solverKey":"shortestPath","type":"algorithm","class":"heuristic","defaults":{"evaluatingDetailLevel":1,"maxEvaluatingDetailLevel":1}},"html":"<h1>Shortest Path</h1>\n<p>This is a heuristic, greedy algorithm. It continually chooses the best looking option from the current state.</p>\n<ol>\n<li>From the starting point</li>\n<li>sort the remaining available points based on cost (distance)</li>\n<li>Choose the closest point and go there</li>\n<li>Chosen point is no longer an \"available point\"</li>\n<li>Continue this way until there are no available points, and then return to the start.</li>\n</ol>\n<h2>The code</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">shortestPath</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">points</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>points<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// sort remaining points in place by their </span>\n    <span class=\"token comment\">// distance from the last point in the current path</span>\n    points<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>\n      <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// go to the closest remaining point</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// return to start after visiting all other points</span>\n  path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> cost <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},{"node":{"frontmatter":{"friendlyName":"Two Opt Reciprocal Exchange","solverKey":"twoOptReciprocalExchange","type":"algorithm","class":"heuristic","defaults":{"evaluatingDetailLevel":1,"maxEvaluatingDetailLevel":1}},"html":"<h1>Two-Opt Reciprocal Exchange</h1>\n<p>This is a heuristic, genetic algorithm. It continuously evolves to a better path until it can't find a better evolution.</p>\n<p>It is similar to the 2-opt mutation or inversion algorithm, although generally will find a less optimal algorithm. However, the computational cost of calculating new solutions is less intensive.</p>\n<p>The big difference with 2-opt mutation is not reversing the path between the 2 points. This algorithm is <strong>not</strong> always going to find a path that doesn't cross itself.</p>\n<p>It could be worthwhile to try this algorithm prior to 2-opt inversion because of the cheaper cost of calculation, but probably not.</p>\n<ol>\n<li>While a better path has not been found.</li>\n<li>For each pair of points:</li>\n<li>Swap the points in the path. That is, go to point B before point A, continue along the same path, and go to point A where point B was. </li>\n<li>If the new path is cheaper (shorter), keep it and continue searching. Remember that we found a better path.</li>\n<li>If not, revert the path and continue searching.</li>\n</ol>\n<h2>The code</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoOptReciprocalExchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">path</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> best <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  \n  self<span class=\"token punctuation\">.</span><span class=\"token function\">setBestPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> best<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>swapped<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> pt1<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pt1<span class=\"token operator\">&lt;</span>path<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pt1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> pt2<span class=\"token operator\">=</span>pt1<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pt2<span class=\"token operator\">&lt;</span>path<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pt2<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// swap current pair of points</span>\n        <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">[</span>pt1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>pt2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">[</span>pt2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>pt1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\">// calculate new cost</span>\n        <span class=\"token keyword\">const</span> cost <span class=\"token operator\">=</span> <span class=\"token function\">pathCost</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cost <span class=\"token operator\">&lt;</span> best<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// found a better path after the swap, keep it</span>\n          swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          best <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// swap back - this one's worse</span>\n          <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">[</span>pt1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>pt2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">[</span>pt2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>pt1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}}]}}}